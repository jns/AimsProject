#!/usr/bin/env ruby

#
# AimsCalc [geometry] [control]
# 
# Author: Joshua Shapiro, 2012
# email: joshua.shapiro@gmail.com
# 
# Generate a set of FHI-AIMS calculations from control and geometry files.
# If the user provides filename on the command line the calculation is generated, 
# otherwise, the user is prompted for filenames.
#

begin
  require 'aims_project'
rescue
  require 'rubygems'
  require 'aims_project'
end

def usage
  STDERR.puts <<-END_USAGE
usage: AimsCalc command [args]
  Valid commands are:
  create   - Create a new calculation
  restart  - Restart an aborted or cancelled calculation using most recent geometry   
  help cmd - For help on a given command
END_USAGE
end

def help(cmd)
  case cmd
  when /create/
    puts <<-HELP
usage: AimsCalc create [geometry] [control]
Create and stage a new calculation.
 * geometry is the name of a geometry file
 * control is the name of a control file
 
 Without arguments, the user will be prompted to select geometry and control files.
 
HELP
  when /restart/
    puts <<-HELP
usage: AimsCalc restart [calculation]
Restart an aborted or cancelled calculation using most recent available geometry.
 * The name of a calculation
 
Without arguments, the user will be prompted to select a calculation.

HELP
  else
    usage
  end
end


# Create a calculation from a geometry and control file. 
# * +geometry+ +String+, The name of a file that can be found in the geometry directory
# * +control+ +String+, The name of a file that can be found in the control directory
def build_calculation(geometry, control)
  begin
    calc = AimsProject::Calculation.create(geometry, control)
  rescue 
    puts $!.message
  end
end

# Generate a new calculation by calling Calculation::restart_relaxation
def restart_calculation(calculation)
  calc_dir = File.join(AimsProject::CALCULATION_DIR, File.basename(calculation))
  calc = AimsProject::Calculation.load(calc_dir)
  calc.restart_relaxation
  puts "Created #{calc.name}"
end

# Print status information of each calculation
def calc_statuses
  project_obj_files = Dir["*.yaml"]
  project = AimsProject::Project.load(project_obj_files.first)
  project.calculations.each{|c|
      puts c.to_yaml
  }
end

# Run the desired command
begin
  args = ARGV
  cmd = args.shift
  case cmd
  when /create/
    build_calculation(args[0], args[1])
  when /restart/
    restart_calculation(args[0])
  when /status/
    calc_statuses
  when /help/
    help(args[0])
  else
    usage
  end
rescue AimsProject::AimsProjectException => ex
  STDERR.puts ex.message
rescue => error
  STDERR.puts
  STDERR.puts "Sorry, something went wrong. Please send the following information to joshua.shapiro@gmail.com"
  STDERR.puts
  STDERR.puts "FILE:  #{__FILE__}"
  STDERR.puts "CMD:   #{cmd}"
  STDERR.puts "ARGS:  #{args.join(" ")}"
  STDERR.puts "ERROR: " + error.message
  STDERR.print "\t" + error.backtrace.slice(0..5).join("\n\t")
  STDERR.puts 
  STDERR.puts 
end