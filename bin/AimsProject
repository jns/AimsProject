#!/usr/bin/env ruby
require 'aims_project'
require 'fileutils'
require 'highline'

# Initialize an AimsProject
# Create a directory named by the project
# and generate the AimsProjectInfo.yaml file 

ui = HighLine.new
skeleton_dir = File.join(Dir.home, ".aims_project")

unless File.exists?(skeleton_dir)
  ui.say <<-EOF
  
   It looks like this is the first time you are running AimsProject.
   
   I can create the directory $HOME/.aims_project which will be the 
   template for all of your future projects.  Feel free to customize the
   files in this directory to suit your needs.  In particular, you will
   want to customize 'Capfile' and 'aims.sh'.  And you may want to add 
   variables that should be available to any project in 'project_variables.rb'
   
   EOF
   
   # Copy the skeleton directory tasks into config
   script_dir = File.join(File.dirname(File.expand_path(__FILE__)), '..', 'skeleton')

  if ui.agree("Can I create #{Dir.home}/.aims_project?")
    # Create the skeleton directory in $HOME/.aims_project
    Dir.mkdir skeleton_dir  
    FileUtils.cp_r(File.join(script_dir, '.'), skeleton_dir)
  else
    ui.say("Ok, maybe next time.")
    skeleton_dir = script_dir
  end  
end

# Set the project name and direcory
projectName = ARGV[0]
unless projectName
  projectName = ui.ask("Please specify the name of the project: ", String) {|q| q.whitespace = :remove}.to_s
end

projectDir = projectName

if project = AimsProject::Project.create(projectName)
  
  ui.say "Creating #{projectDir}..."
  
  # save the project into a directory named after the project
  project.save(projectDir)
  
  # Copy the skeleton directory tasks into config
  FileUtils.cp_r(File.join(skeleton_dir, '.'), projectDir)
  
  
  # Generate the default Capfile
  capfile = ""
  File.open(File.join(projectDir, "Capfile"), 'r') do |capfile_template|
    capfile_template.each_line do |line|
      line.sub!(/__PROJECT_DIR__/, projectDir)
      line.sub!(/__PROJECT_NAME__/, projectName)
      capfile << line
    end
  end
  
  File.open(File.join(projectDir, "Capfile"), 'w') do |f|
    f.puts capfile
  end
  
  STDOUT.puts <<-EOL
  
  Done creating the aims project #{projectName}. Here are the steps to get started.
  1) Customize the variables in #{File.join(projectDir, "Capfile")}
  2) Add geometry files to the directory #{File.join(projectDir, AimsProject::GEOMETRY_DIR)}
  3) Add control files to the directory #{File.join(projectDir, AimsProject::CONTROL_DIR)}
  4) Generate a calculation with the command:
      AimsCalc create [geometry] [control]
  5) Execute the calculations with the command:
      cap aims:enqueue
      
  EOL
  
else 
  STDERR.puts "Error creating project."
  STDERR.puts $!.message
end